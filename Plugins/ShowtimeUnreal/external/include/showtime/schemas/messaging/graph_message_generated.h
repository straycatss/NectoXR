// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRAPHMESSAGE_SHOWTIME_H_
#define FLATBUFFERS_GENERATED_GRAPHMESSAGE_SHOWTIME_H_

#include "flatbuffers/flatbuffers.h"

#include "graph_types_generated.h"

namespace showtime {

struct GraphMessage;
struct GraphMessageBuilder;

struct GraphMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GraphMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENDER = 4,
    VT_VALUE = 6
  };
  const flatbuffers::String *sender() const {
    return GetPointer<const flatbuffers::String *>(VT_SENDER);
  }
  const showtime::PlugValue *value() const {
    return GetPointer<const showtime::PlugValue *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENDER) &&
           verifier.VerifyString(sender()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyTable(value()) &&
           verifier.EndTable();
  }
};

struct GraphMessageBuilder {
  typedef GraphMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sender(flatbuffers::Offset<flatbuffers::String> sender) {
    fbb_.AddOffset(GraphMessage::VT_SENDER, sender);
  }
  void add_value(flatbuffers::Offset<showtime::PlugValue> value) {
    fbb_.AddOffset(GraphMessage::VT_VALUE, value);
  }
  explicit GraphMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GraphMessageBuilder &operator=(const GraphMessageBuilder &);
  flatbuffers::Offset<GraphMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GraphMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<GraphMessage> CreateGraphMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> sender = 0,
    flatbuffers::Offset<showtime::PlugValue> value = 0) {
  GraphMessageBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_sender(sender);
  return builder_.Finish();
}

inline flatbuffers::Offset<GraphMessage> CreateGraphMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *sender = nullptr,
    flatbuffers::Offset<showtime::PlugValue> value = 0) {
  auto sender__ = sender ? _fbb.CreateString(sender) : 0;
  return showtime::CreateGraphMessage(
      _fbb,
      sender__,
      value);
}

inline const showtime::GraphMessage *GetGraphMessage(const void *buf) {
  return flatbuffers::GetRoot<showtime::GraphMessage>(buf);
}

inline const showtime::GraphMessage *GetSizePrefixedGraphMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<showtime::GraphMessage>(buf);
}

inline bool VerifyGraphMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<showtime::GraphMessage>(nullptr);
}

inline bool VerifySizePrefixedGraphMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<showtime::GraphMessage>(nullptr);
}

inline void FinishGraphMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<showtime::GraphMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGraphMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<showtime::GraphMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace showtime

#endif  // FLATBUFFERS_GENERATED_GRAPHMESSAGE_SHOWTIME_H_
