// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STAGEMESSAGE_SHOWTIME_H_
#define FLATBUFFERS_GENERATED_STAGEMESSAGE_SHOWTIME_H_

#include "flatbuffers/flatbuffers.h"

#include "graph_types_generated.h"

namespace showtime {

struct SignalMessage;
struct SignalMessageBuilder;

struct ServerStatusMessage;
struct ServerStatusMessageBuilder;

struct ClientJoinRequest;
struct ClientJoinRequestBuilder;

struct ClientGraphHandshakeStart;
struct ClientGraphHandshakeStartBuilder;

struct ClientGraphHandshakeStop;
struct ClientGraphHandshakeStopBuilder;

struct ClientGraphHandshakeListen;
struct ClientGraphHandshakeListenBuilder;

struct ClientLeaveRequest;
struct ClientLeaveRequestBuilder;

struct EntityCreateRequest;
struct EntityCreateRequestBuilder;

struct EntityReadRequest;
struct EntityReadRequestBuilder;

struct EntityUpdateRequest;
struct EntityUpdateRequestBuilder;

struct EntityDestroyRequest;
struct EntityDestroyRequestBuilder;

struct EntityTakeOwnershipRequest;
struct EntityTakeOwnershipRequestBuilder;

struct EntityObserveRequest;
struct EntityObserveRequestBuilder;

struct FactoryCreateEntityRequest;
struct FactoryCreateEntityRequestBuilder;

struct FactoryCreateEntityACK;
struct FactoryCreateEntityACKBuilder;

struct CableCreateRequest;
struct CableCreateRequestBuilder;

struct CableReadRequest;
struct CableReadRequestBuilder;

struct CableUpdateRequest;
struct CableUpdateRequestBuilder;

struct CableDestroyRequest;
struct CableDestroyRequestBuilder;

struct StageMessage;
struct StageMessageBuilder;

enum Signal {
  Signal_EMPTY = 0,
  Signal_OK = 1,
  Signal_CLIENT_SYNC = 2,
  Signal_CLIENT_HEARTBEAT = 3,
  Signal_ERR_MSG_TYPE_UNKNOWN = 4,
  Signal_ERR_MSG_MALFORMED = 5,
  Signal_ERR_STAGE_BAD_CABLE_DISCONNECT_REQUEST = 6,
  Signal_ERR_STAGE_BAD_CABLE_CONNECT_REQUEST = 7,
  Signal_ERR_STAGE_PERFORMER_NOT_FOUND = 8,
  Signal_ERR_STAGE_PERFORMER_ALREADY_EXISTS = 9,
  Signal_ERR_STAGE_PERFORMER_ALREADY_CONNECTED = 10,
  Signal_ERR_STAGE_REQUEST_MISSING_ARG = 11,
  Signal_ERR_ENTITY_NOT_FOUND = 12,
  Signal_ERR_ENTITY_ALREADY_EXISTS = 13,
  Signal_ERR_CABLE_PLUGS_NOT_FOUND = 14,
  Signal_ERR_STAGE_TIMEOUT = 15,
  Signal_ERR_NOT_CONNECTED = 16,
  Signal_MIN = Signal_EMPTY,
  Signal_MAX = Signal_ERR_NOT_CONNECTED
};

inline const Signal (&EnumValuesSignal())[17] {
  static const Signal values[] = {
    Signal_EMPTY,
    Signal_OK,
    Signal_CLIENT_SYNC,
    Signal_CLIENT_HEARTBEAT,
    Signal_ERR_MSG_TYPE_UNKNOWN,
    Signal_ERR_MSG_MALFORMED,
    Signal_ERR_STAGE_BAD_CABLE_DISCONNECT_REQUEST,
    Signal_ERR_STAGE_BAD_CABLE_CONNECT_REQUEST,
    Signal_ERR_STAGE_PERFORMER_NOT_FOUND,
    Signal_ERR_STAGE_PERFORMER_ALREADY_EXISTS,
    Signal_ERR_STAGE_PERFORMER_ALREADY_CONNECTED,
    Signal_ERR_STAGE_REQUEST_MISSING_ARG,
    Signal_ERR_ENTITY_NOT_FOUND,
    Signal_ERR_ENTITY_ALREADY_EXISTS,
    Signal_ERR_CABLE_PLUGS_NOT_FOUND,
    Signal_ERR_STAGE_TIMEOUT,
    Signal_ERR_NOT_CONNECTED
  };
  return values;
}

inline const char * const *EnumNamesSignal() {
  static const char * const names[18] = {
    "EMPTY",
    "OK",
    "CLIENT_SYNC",
    "CLIENT_HEARTBEAT",
    "ERR_MSG_TYPE_UNKNOWN",
    "ERR_MSG_MALFORMED",
    "ERR_STAGE_BAD_CABLE_DISCONNECT_REQUEST",
    "ERR_STAGE_BAD_CABLE_CONNECT_REQUEST",
    "ERR_STAGE_PERFORMER_NOT_FOUND",
    "ERR_STAGE_PERFORMER_ALREADY_EXISTS",
    "ERR_STAGE_PERFORMER_ALREADY_CONNECTED",
    "ERR_STAGE_REQUEST_MISSING_ARG",
    "ERR_ENTITY_NOT_FOUND",
    "ERR_ENTITY_ALREADY_EXISTS",
    "ERR_CABLE_PLUGS_NOT_FOUND",
    "ERR_STAGE_TIMEOUT",
    "ERR_NOT_CONNECTED",
    nullptr
  };
  return names;
}

inline const char *EnumNameSignal(Signal e) {
  if (flatbuffers::IsOutRange(e, Signal_EMPTY, Signal_ERR_NOT_CONNECTED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSignal()[index];
}

enum ClientLeaveReason {
  ClientLeaveReason_QUIT = 0,
  ClientLeaveReason_TIMEOUT = 1,
  ClientLeaveReason_CRASH = 2,
  ClientLeaveReason_MIN = ClientLeaveReason_QUIT,
  ClientLeaveReason_MAX = ClientLeaveReason_CRASH
};

inline const ClientLeaveReason (&EnumValuesClientLeaveReason())[3] {
  static const ClientLeaveReason values[] = {
    ClientLeaveReason_QUIT,
    ClientLeaveReason_TIMEOUT,
    ClientLeaveReason_CRASH
  };
  return values;
}

inline const char * const *EnumNamesClientLeaveReason() {
  static const char * const names[4] = {
    "QUIT",
    "TIMEOUT",
    "CRASH",
    nullptr
  };
  return names;
}

inline const char *EnumNameClientLeaveReason(ClientLeaveReason e) {
  if (flatbuffers::IsOutRange(e, ClientLeaveReason_QUIT, ClientLeaveReason_CRASH)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesClientLeaveReason()[index];
}

enum ServerStatus {
  ServerStatus_QUIT = 0,
  ServerStatus_CRASH = 1,
  ServerStatus_MIN = ServerStatus_QUIT,
  ServerStatus_MAX = ServerStatus_CRASH
};

inline const ServerStatus (&EnumValuesServerStatus())[2] {
  static const ServerStatus values[] = {
    ServerStatus_QUIT,
    ServerStatus_CRASH
  };
  return values;
}

inline const char * const *EnumNamesServerStatus() {
  static const char * const names[3] = {
    "QUIT",
    "CRASH",
    nullptr
  };
  return names;
}

inline const char *EnumNameServerStatus(ServerStatus e) {
  if (flatbuffers::IsOutRange(e, ServerStatus_QUIT, ServerStatus_CRASH)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesServerStatus()[index];
}

enum Content {
  Content_NONE = 0,
  Content_SignalMessage = 1,
  Content_ServerStatusMessage = 2,
  Content_ClientJoinRequest = 3,
  Content_ClientLeaveRequest = 4,
  Content_ClientGraphHandshakeStart = 5,
  Content_ClientGraphHandshakeStop = 6,
  Content_ClientGraphHandshakeListen = 7,
  Content_EntityCreateRequest = 8,
  Content_EntityReadRequest = 9,
  Content_EntityUpdateRequest = 10,
  Content_EntityDestroyRequest = 11,
  Content_EntityTakeOwnershipRequest = 12,
  Content_EntityObserveRequest = 13,
  Content_FactoryCreateEntityRequest = 14,
  Content_FactoryCreateEntityACK = 15,
  Content_CableCreateRequest = 16,
  Content_CableReadRequest = 17,
  Content_CableUpdateRequest = 18,
  Content_CableDestroyRequest = 19,
  Content_MIN = Content_NONE,
  Content_MAX = Content_CableDestroyRequest
};

inline const Content (&EnumValuesContent())[20] {
  static const Content values[] = {
    Content_NONE,
    Content_SignalMessage,
    Content_ServerStatusMessage,
    Content_ClientJoinRequest,
    Content_ClientLeaveRequest,
    Content_ClientGraphHandshakeStart,
    Content_ClientGraphHandshakeStop,
    Content_ClientGraphHandshakeListen,
    Content_EntityCreateRequest,
    Content_EntityReadRequest,
    Content_EntityUpdateRequest,
    Content_EntityDestroyRequest,
    Content_EntityTakeOwnershipRequest,
    Content_EntityObserveRequest,
    Content_FactoryCreateEntityRequest,
    Content_FactoryCreateEntityACK,
    Content_CableCreateRequest,
    Content_CableReadRequest,
    Content_CableUpdateRequest,
    Content_CableDestroyRequest
  };
  return values;
}

inline const char * const *EnumNamesContent() {
  static const char * const names[21] = {
    "NONE",
    "SignalMessage",
    "ServerStatusMessage",
    "ClientJoinRequest",
    "ClientLeaveRequest",
    "ClientGraphHandshakeStart",
    "ClientGraphHandshakeStop",
    "ClientGraphHandshakeListen",
    "EntityCreateRequest",
    "EntityReadRequest",
    "EntityUpdateRequest",
    "EntityDestroyRequest",
    "EntityTakeOwnershipRequest",
    "EntityObserveRequest",
    "FactoryCreateEntityRequest",
    "FactoryCreateEntityACK",
    "CableCreateRequest",
    "CableReadRequest",
    "CableUpdateRequest",
    "CableDestroyRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameContent(Content e) {
  if (flatbuffers::IsOutRange(e, Content_NONE, Content_CableDestroyRequest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesContent()[index];
}

template<typename T> struct ContentTraits {
  static const Content enum_value = Content_NONE;
};

template<> struct ContentTraits<showtime::SignalMessage> {
  static const Content enum_value = Content_SignalMessage;
};

template<> struct ContentTraits<showtime::ServerStatusMessage> {
  static const Content enum_value = Content_ServerStatusMessage;
};

template<> struct ContentTraits<showtime::ClientJoinRequest> {
  static const Content enum_value = Content_ClientJoinRequest;
};

template<> struct ContentTraits<showtime::ClientLeaveRequest> {
  static const Content enum_value = Content_ClientLeaveRequest;
};

template<> struct ContentTraits<showtime::ClientGraphHandshakeStart> {
  static const Content enum_value = Content_ClientGraphHandshakeStart;
};

template<> struct ContentTraits<showtime::ClientGraphHandshakeStop> {
  static const Content enum_value = Content_ClientGraphHandshakeStop;
};

template<> struct ContentTraits<showtime::ClientGraphHandshakeListen> {
  static const Content enum_value = Content_ClientGraphHandshakeListen;
};

template<> struct ContentTraits<showtime::EntityCreateRequest> {
  static const Content enum_value = Content_EntityCreateRequest;
};

template<> struct ContentTraits<showtime::EntityReadRequest> {
  static const Content enum_value = Content_EntityReadRequest;
};

template<> struct ContentTraits<showtime::EntityUpdateRequest> {
  static const Content enum_value = Content_EntityUpdateRequest;
};

template<> struct ContentTraits<showtime::EntityDestroyRequest> {
  static const Content enum_value = Content_EntityDestroyRequest;
};

template<> struct ContentTraits<showtime::EntityTakeOwnershipRequest> {
  static const Content enum_value = Content_EntityTakeOwnershipRequest;
};

template<> struct ContentTraits<showtime::EntityObserveRequest> {
  static const Content enum_value = Content_EntityObserveRequest;
};

template<> struct ContentTraits<showtime::FactoryCreateEntityRequest> {
  static const Content enum_value = Content_FactoryCreateEntityRequest;
};

template<> struct ContentTraits<showtime::FactoryCreateEntityACK> {
  static const Content enum_value = Content_FactoryCreateEntityACK;
};

template<> struct ContentTraits<showtime::CableCreateRequest> {
  static const Content enum_value = Content_CableCreateRequest;
};

template<> struct ContentTraits<showtime::CableReadRequest> {
  static const Content enum_value = Content_CableReadRequest;
};

template<> struct ContentTraits<showtime::CableUpdateRequest> {
  static const Content enum_value = Content_CableUpdateRequest;
};

template<> struct ContentTraits<showtime::CableDestroyRequest> {
  static const Content enum_value = Content_CableDestroyRequest;
};

bool VerifyContent(flatbuffers::Verifier &verifier, const void *obj, Content type);
bool VerifyContentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct SignalMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SignalMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIGNAL = 4
  };
  showtime::Signal signal() const {
    return static_cast<showtime::Signal>(GetField<int8_t>(VT_SIGNAL, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_SIGNAL) &&
           verifier.EndTable();
  }
};

struct SignalMessageBuilder {
  typedef SignalMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_signal(showtime::Signal signal) {
    fbb_.AddElement<int8_t>(SignalMessage::VT_SIGNAL, static_cast<int8_t>(signal), 0);
  }
  explicit SignalMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SignalMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SignalMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<SignalMessage> CreateSignalMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    showtime::Signal signal = showtime::Signal_EMPTY) {
  SignalMessageBuilder builder_(_fbb);
  builder_.add_signal(signal);
  return builder_.Finish();
}

struct ServerStatusMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ServerStatusMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4
  };
  showtime::ServerStatus status() const {
    return static_cast<showtime::ServerStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
};

struct ServerStatusMessageBuilder {
  typedef ServerStatusMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(showtime::ServerStatus status) {
    fbb_.AddElement<int8_t>(ServerStatusMessage::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  explicit ServerStatusMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ServerStatusMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ServerStatusMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<ServerStatusMessage> CreateServerStatusMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    showtime::ServerStatus status = showtime::ServerStatus_QUIT) {
  ServerStatusMessageBuilder builder_(_fbb);
  builder_.add_status(status);
  return builder_.Finish();
}

struct ClientJoinRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientJoinRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PERFORMER = 4,
    VT_GRAPH_RELIABLE_ADDRESS = 6,
    VT_GRAPH_UNRELIABLE_ADDRESS = 8
  };
  const showtime::Performer *performer() const {
    return GetPointer<const showtime::Performer *>(VT_PERFORMER);
  }
  const flatbuffers::String *graph_reliable_address() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPH_RELIABLE_ADDRESS);
  }
  const flatbuffers::String *graph_unreliable_address() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAPH_UNRELIABLE_ADDRESS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PERFORMER) &&
           verifier.VerifyTable(performer()) &&
           VerifyOffset(verifier, VT_GRAPH_RELIABLE_ADDRESS) &&
           verifier.VerifyString(graph_reliable_address()) &&
           VerifyOffset(verifier, VT_GRAPH_UNRELIABLE_ADDRESS) &&
           verifier.VerifyString(graph_unreliable_address()) &&
           verifier.EndTable();
  }
};

struct ClientJoinRequestBuilder {
  typedef ClientJoinRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_performer(flatbuffers::Offset<showtime::Performer> performer) {
    fbb_.AddOffset(ClientJoinRequest::VT_PERFORMER, performer);
  }
  void add_graph_reliable_address(flatbuffers::Offset<flatbuffers::String> graph_reliable_address) {
    fbb_.AddOffset(ClientJoinRequest::VT_GRAPH_RELIABLE_ADDRESS, graph_reliable_address);
  }
  void add_graph_unreliable_address(flatbuffers::Offset<flatbuffers::String> graph_unreliable_address) {
    fbb_.AddOffset(ClientJoinRequest::VT_GRAPH_UNRELIABLE_ADDRESS, graph_unreliable_address);
  }
  explicit ClientJoinRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClientJoinRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientJoinRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientJoinRequest> CreateClientJoinRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<showtime::Performer> performer = 0,
    flatbuffers::Offset<flatbuffers::String> graph_reliable_address = 0,
    flatbuffers::Offset<flatbuffers::String> graph_unreliable_address = 0) {
  ClientJoinRequestBuilder builder_(_fbb);
  builder_.add_graph_unreliable_address(graph_unreliable_address);
  builder_.add_graph_reliable_address(graph_reliable_address);
  builder_.add_performer(performer);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientJoinRequest> CreateClientJoinRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<showtime::Performer> performer = 0,
    const char *graph_reliable_address = nullptr,
    const char *graph_unreliable_address = nullptr) {
  auto graph_reliable_address__ = graph_reliable_address ? _fbb.CreateString(graph_reliable_address) : 0;
  auto graph_unreliable_address__ = graph_unreliable_address ? _fbb.CreateString(graph_unreliable_address) : 0;
  return showtime::CreateClientJoinRequest(
      _fbb,
      performer,
      graph_reliable_address__,
      graph_unreliable_address__);
}

struct ClientGraphHandshakeStart FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientGraphHandshakeStartBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECEIVER_URI = 4,
    VT_RECEIVER_ADDRESS = 6
  };
  const flatbuffers::String *receiver_URI() const {
    return GetPointer<const flatbuffers::String *>(VT_RECEIVER_URI);
  }
  const flatbuffers::String *receiver_address() const {
    return GetPointer<const flatbuffers::String *>(VT_RECEIVER_ADDRESS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECEIVER_URI) &&
           verifier.VerifyString(receiver_URI()) &&
           VerifyOffset(verifier, VT_RECEIVER_ADDRESS) &&
           verifier.VerifyString(receiver_address()) &&
           verifier.EndTable();
  }
};

struct ClientGraphHandshakeStartBuilder {
  typedef ClientGraphHandshakeStart Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_receiver_URI(flatbuffers::Offset<flatbuffers::String> receiver_URI) {
    fbb_.AddOffset(ClientGraphHandshakeStart::VT_RECEIVER_URI, receiver_URI);
  }
  void add_receiver_address(flatbuffers::Offset<flatbuffers::String> receiver_address) {
    fbb_.AddOffset(ClientGraphHandshakeStart::VT_RECEIVER_ADDRESS, receiver_address);
  }
  explicit ClientGraphHandshakeStartBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClientGraphHandshakeStart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientGraphHandshakeStart>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientGraphHandshakeStart> CreateClientGraphHandshakeStart(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> receiver_URI = 0,
    flatbuffers::Offset<flatbuffers::String> receiver_address = 0) {
  ClientGraphHandshakeStartBuilder builder_(_fbb);
  builder_.add_receiver_address(receiver_address);
  builder_.add_receiver_URI(receiver_URI);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientGraphHandshakeStart> CreateClientGraphHandshakeStartDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *receiver_URI = nullptr,
    const char *receiver_address = nullptr) {
  auto receiver_URI__ = receiver_URI ? _fbb.CreateString(receiver_URI) : 0;
  auto receiver_address__ = receiver_address ? _fbb.CreateString(receiver_address) : 0;
  return showtime::CreateClientGraphHandshakeStart(
      _fbb,
      receiver_URI__,
      receiver_address__);
}

struct ClientGraphHandshakeStop FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientGraphHandshakeStopBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECEIVER_URI = 4
  };
  const flatbuffers::String *receiver_URI() const {
    return GetPointer<const flatbuffers::String *>(VT_RECEIVER_URI);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECEIVER_URI) &&
           verifier.VerifyString(receiver_URI()) &&
           verifier.EndTable();
  }
};

struct ClientGraphHandshakeStopBuilder {
  typedef ClientGraphHandshakeStop Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_receiver_URI(flatbuffers::Offset<flatbuffers::String> receiver_URI) {
    fbb_.AddOffset(ClientGraphHandshakeStop::VT_RECEIVER_URI, receiver_URI);
  }
  explicit ClientGraphHandshakeStopBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClientGraphHandshakeStop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientGraphHandshakeStop>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientGraphHandshakeStop> CreateClientGraphHandshakeStop(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> receiver_URI = 0) {
  ClientGraphHandshakeStopBuilder builder_(_fbb);
  builder_.add_receiver_URI(receiver_URI);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientGraphHandshakeStop> CreateClientGraphHandshakeStopDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *receiver_URI = nullptr) {
  auto receiver_URI__ = receiver_URI ? _fbb.CreateString(receiver_URI) : 0;
  return showtime::CreateClientGraphHandshakeStop(
      _fbb,
      receiver_URI__);
}

struct ClientGraphHandshakeListen FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientGraphHandshakeListenBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENDER_URI = 4,
    VT_SENDER_ADDRESS = 6
  };
  const flatbuffers::String *sender_URI() const {
    return GetPointer<const flatbuffers::String *>(VT_SENDER_URI);
  }
  const flatbuffers::String *sender_address() const {
    return GetPointer<const flatbuffers::String *>(VT_SENDER_ADDRESS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENDER_URI) &&
           verifier.VerifyString(sender_URI()) &&
           VerifyOffset(verifier, VT_SENDER_ADDRESS) &&
           verifier.VerifyString(sender_address()) &&
           verifier.EndTable();
  }
};

struct ClientGraphHandshakeListenBuilder {
  typedef ClientGraphHandshakeListen Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sender_URI(flatbuffers::Offset<flatbuffers::String> sender_URI) {
    fbb_.AddOffset(ClientGraphHandshakeListen::VT_SENDER_URI, sender_URI);
  }
  void add_sender_address(flatbuffers::Offset<flatbuffers::String> sender_address) {
    fbb_.AddOffset(ClientGraphHandshakeListen::VT_SENDER_ADDRESS, sender_address);
  }
  explicit ClientGraphHandshakeListenBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClientGraphHandshakeListen> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientGraphHandshakeListen>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientGraphHandshakeListen> CreateClientGraphHandshakeListen(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> sender_URI = 0,
    flatbuffers::Offset<flatbuffers::String> sender_address = 0) {
  ClientGraphHandshakeListenBuilder builder_(_fbb);
  builder_.add_sender_address(sender_address);
  builder_.add_sender_URI(sender_URI);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientGraphHandshakeListen> CreateClientGraphHandshakeListenDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *sender_URI = nullptr,
    const char *sender_address = nullptr) {
  auto sender_URI__ = sender_URI ? _fbb.CreateString(sender_URI) : 0;
  auto sender_address__ = sender_address ? _fbb.CreateString(sender_address) : 0;
  return showtime::CreateClientGraphHandshakeListen(
      _fbb,
      sender_URI__,
      sender_address__);
}

struct ClientLeaveRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientLeaveRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PERFORMER_URI = 4,
    VT_REASON = 6
  };
  const flatbuffers::String *performer_URI() const {
    return GetPointer<const flatbuffers::String *>(VT_PERFORMER_URI);
  }
  showtime::ClientLeaveReason reason() const {
    return static_cast<showtime::ClientLeaveReason>(GetField<int8_t>(VT_REASON, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PERFORMER_URI) &&
           verifier.VerifyString(performer_URI()) &&
           VerifyField<int8_t>(verifier, VT_REASON) &&
           verifier.EndTable();
  }
};

struct ClientLeaveRequestBuilder {
  typedef ClientLeaveRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_performer_URI(flatbuffers::Offset<flatbuffers::String> performer_URI) {
    fbb_.AddOffset(ClientLeaveRequest::VT_PERFORMER_URI, performer_URI);
  }
  void add_reason(showtime::ClientLeaveReason reason) {
    fbb_.AddElement<int8_t>(ClientLeaveRequest::VT_REASON, static_cast<int8_t>(reason), 0);
  }
  explicit ClientLeaveRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClientLeaveRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientLeaveRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientLeaveRequest> CreateClientLeaveRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> performer_URI = 0,
    showtime::ClientLeaveReason reason = showtime::ClientLeaveReason_QUIT) {
  ClientLeaveRequestBuilder builder_(_fbb);
  builder_.add_performer_URI(performer_URI);
  builder_.add_reason(reason);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientLeaveRequest> CreateClientLeaveRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *performer_URI = nullptr,
    showtime::ClientLeaveReason reason = showtime::ClientLeaveReason_QUIT) {
  auto performer_URI__ = performer_URI ? _fbb.CreateString(performer_URI) : 0;
  return showtime::CreateClientLeaveRequest(
      _fbb,
      performer_URI__,
      reason);
}

struct EntityCreateRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityCreateRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY_TYPE = 4,
    VT_ENTITY = 6
  };
  showtime::EntityTypes entity_type() const {
    return static_cast<showtime::EntityTypes>(GetField<uint8_t>(VT_ENTITY_TYPE, 0));
  }
  const void *entity() const {
    return GetPointer<const void *>(VT_ENTITY);
  }
  template<typename T> const T *entity_as() const;
  const showtime::Component *entity_as_Component() const {
    return entity_type() == showtime::EntityTypes_Component ? static_cast<const showtime::Component *>(entity()) : nullptr;
  }
  const showtime::Performer *entity_as_Performer() const {
    return entity_type() == showtime::EntityTypes_Performer ? static_cast<const showtime::Performer *>(entity()) : nullptr;
  }
  const showtime::Plug *entity_as_Plug() const {
    return entity_type() == showtime::EntityTypes_Plug ? static_cast<const showtime::Plug *>(entity()) : nullptr;
  }
  const showtime::Factory *entity_as_Factory() const {
    return entity_type() == showtime::EntityTypes_Factory ? static_cast<const showtime::Factory *>(entity()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENTITY_TYPE) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           VerifyEntityTypes(verifier, entity(), entity_type()) &&
           verifier.EndTable();
  }
};

template<> inline const showtime::Component *EntityCreateRequest::entity_as<showtime::Component>() const {
  return entity_as_Component();
}

template<> inline const showtime::Performer *EntityCreateRequest::entity_as<showtime::Performer>() const {
  return entity_as_Performer();
}

template<> inline const showtime::Plug *EntityCreateRequest::entity_as<showtime::Plug>() const {
  return entity_as_Plug();
}

template<> inline const showtime::Factory *EntityCreateRequest::entity_as<showtime::Factory>() const {
  return entity_as_Factory();
}

struct EntityCreateRequestBuilder {
  typedef EntityCreateRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entity_type(showtime::EntityTypes entity_type) {
    fbb_.AddElement<uint8_t>(EntityCreateRequest::VT_ENTITY_TYPE, static_cast<uint8_t>(entity_type), 0);
  }
  void add_entity(flatbuffers::Offset<void> entity) {
    fbb_.AddOffset(EntityCreateRequest::VT_ENTITY, entity);
  }
  explicit EntityCreateRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EntityCreateRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EntityCreateRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<EntityCreateRequest> CreateEntityCreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    showtime::EntityTypes entity_type = showtime::EntityTypes_NONE,
    flatbuffers::Offset<void> entity = 0) {
  EntityCreateRequestBuilder builder_(_fbb);
  builder_.add_entity(entity);
  builder_.add_entity_type(entity_type);
  return builder_.Finish();
}

struct EntityReadRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityReadRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URI = 4
  };
  const flatbuffers::String *URI() const {
    return GetPointer<const flatbuffers::String *>(VT_URI);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URI) &&
           verifier.VerifyString(URI()) &&
           verifier.EndTable();
  }
};

struct EntityReadRequestBuilder {
  typedef EntityReadRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_URI(flatbuffers::Offset<flatbuffers::String> URI) {
    fbb_.AddOffset(EntityReadRequest::VT_URI, URI);
  }
  explicit EntityReadRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EntityReadRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EntityReadRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<EntityReadRequest> CreateEntityReadRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> URI = 0) {
  EntityReadRequestBuilder builder_(_fbb);
  builder_.add_URI(URI);
  return builder_.Finish();
}

inline flatbuffers::Offset<EntityReadRequest> CreateEntityReadRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *URI = nullptr) {
  auto URI__ = URI ? _fbb.CreateString(URI) : 0;
  return showtime::CreateEntityReadRequest(
      _fbb,
      URI__);
}

struct EntityUpdateRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityUpdateRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY_TYPE = 4,
    VT_ENTITY = 6,
    VT_ORIGINAL_PATH = 8
  };
  showtime::EntityTypes entity_type() const {
    return static_cast<showtime::EntityTypes>(GetField<uint8_t>(VT_ENTITY_TYPE, 0));
  }
  const void *entity() const {
    return GetPointer<const void *>(VT_ENTITY);
  }
  template<typename T> const T *entity_as() const;
  const showtime::Component *entity_as_Component() const {
    return entity_type() == showtime::EntityTypes_Component ? static_cast<const showtime::Component *>(entity()) : nullptr;
  }
  const showtime::Performer *entity_as_Performer() const {
    return entity_type() == showtime::EntityTypes_Performer ? static_cast<const showtime::Performer *>(entity()) : nullptr;
  }
  const showtime::Plug *entity_as_Plug() const {
    return entity_type() == showtime::EntityTypes_Plug ? static_cast<const showtime::Plug *>(entity()) : nullptr;
  }
  const showtime::Factory *entity_as_Factory() const {
    return entity_type() == showtime::EntityTypes_Factory ? static_cast<const showtime::Factory *>(entity()) : nullptr;
  }
  const flatbuffers::String *original_path() const {
    return GetPointer<const flatbuffers::String *>(VT_ORIGINAL_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENTITY_TYPE) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           VerifyEntityTypes(verifier, entity(), entity_type()) &&
           VerifyOffset(verifier, VT_ORIGINAL_PATH) &&
           verifier.VerifyString(original_path()) &&
           verifier.EndTable();
  }
};

template<> inline const showtime::Component *EntityUpdateRequest::entity_as<showtime::Component>() const {
  return entity_as_Component();
}

template<> inline const showtime::Performer *EntityUpdateRequest::entity_as<showtime::Performer>() const {
  return entity_as_Performer();
}

template<> inline const showtime::Plug *EntityUpdateRequest::entity_as<showtime::Plug>() const {
  return entity_as_Plug();
}

template<> inline const showtime::Factory *EntityUpdateRequest::entity_as<showtime::Factory>() const {
  return entity_as_Factory();
}

struct EntityUpdateRequestBuilder {
  typedef EntityUpdateRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entity_type(showtime::EntityTypes entity_type) {
    fbb_.AddElement<uint8_t>(EntityUpdateRequest::VT_ENTITY_TYPE, static_cast<uint8_t>(entity_type), 0);
  }
  void add_entity(flatbuffers::Offset<void> entity) {
    fbb_.AddOffset(EntityUpdateRequest::VT_ENTITY, entity);
  }
  void add_original_path(flatbuffers::Offset<flatbuffers::String> original_path) {
    fbb_.AddOffset(EntityUpdateRequest::VT_ORIGINAL_PATH, original_path);
  }
  explicit EntityUpdateRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EntityUpdateRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EntityUpdateRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<EntityUpdateRequest> CreateEntityUpdateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    showtime::EntityTypes entity_type = showtime::EntityTypes_NONE,
    flatbuffers::Offset<void> entity = 0,
    flatbuffers::Offset<flatbuffers::String> original_path = 0) {
  EntityUpdateRequestBuilder builder_(_fbb);
  builder_.add_original_path(original_path);
  builder_.add_entity(entity);
  builder_.add_entity_type(entity_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<EntityUpdateRequest> CreateEntityUpdateRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    showtime::EntityTypes entity_type = showtime::EntityTypes_NONE,
    flatbuffers::Offset<void> entity = 0,
    const char *original_path = nullptr) {
  auto original_path__ = original_path ? _fbb.CreateString(original_path) : 0;
  return showtime::CreateEntityUpdateRequest(
      _fbb,
      entity_type,
      entity,
      original_path__);
}

struct EntityDestroyRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityDestroyRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URI = 4
  };
  const flatbuffers::String *URI() const {
    return GetPointer<const flatbuffers::String *>(VT_URI);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URI) &&
           verifier.VerifyString(URI()) &&
           verifier.EndTable();
  }
};

struct EntityDestroyRequestBuilder {
  typedef EntityDestroyRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_URI(flatbuffers::Offset<flatbuffers::String> URI) {
    fbb_.AddOffset(EntityDestroyRequest::VT_URI, URI);
  }
  explicit EntityDestroyRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EntityDestroyRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EntityDestroyRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<EntityDestroyRequest> CreateEntityDestroyRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> URI = 0) {
  EntityDestroyRequestBuilder builder_(_fbb);
  builder_.add_URI(URI);
  return builder_.Finish();
}

inline flatbuffers::Offset<EntityDestroyRequest> CreateEntityDestroyRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *URI = nullptr) {
  auto URI__ = URI ? _fbb.CreateString(URI) : 0;
  return showtime::CreateEntityDestroyRequest(
      _fbb,
      URI__);
}

struct EntityTakeOwnershipRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityTakeOwnershipRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URI = 4,
    VT_NEW_OWNER = 6
  };
  const flatbuffers::String *URI() const {
    return GetPointer<const flatbuffers::String *>(VT_URI);
  }
  const flatbuffers::String *new_owner() const {
    return GetPointer<const flatbuffers::String *>(VT_NEW_OWNER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URI) &&
           verifier.VerifyString(URI()) &&
           VerifyOffset(verifier, VT_NEW_OWNER) &&
           verifier.VerifyString(new_owner()) &&
           verifier.EndTable();
  }
};

struct EntityTakeOwnershipRequestBuilder {
  typedef EntityTakeOwnershipRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_URI(flatbuffers::Offset<flatbuffers::String> URI) {
    fbb_.AddOffset(EntityTakeOwnershipRequest::VT_URI, URI);
  }
  void add_new_owner(flatbuffers::Offset<flatbuffers::String> new_owner) {
    fbb_.AddOffset(EntityTakeOwnershipRequest::VT_NEW_OWNER, new_owner);
  }
  explicit EntityTakeOwnershipRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EntityTakeOwnershipRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EntityTakeOwnershipRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<EntityTakeOwnershipRequest> CreateEntityTakeOwnershipRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> URI = 0,
    flatbuffers::Offset<flatbuffers::String> new_owner = 0) {
  EntityTakeOwnershipRequestBuilder builder_(_fbb);
  builder_.add_new_owner(new_owner);
  builder_.add_URI(URI);
  return builder_.Finish();
}

inline flatbuffers::Offset<EntityTakeOwnershipRequest> CreateEntityTakeOwnershipRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *URI = nullptr,
    const char *new_owner = nullptr) {
  auto URI__ = URI ? _fbb.CreateString(URI) : 0;
  auto new_owner__ = new_owner ? _fbb.CreateString(new_owner) : 0;
  return showtime::CreateEntityTakeOwnershipRequest(
      _fbb,
      URI__,
      new_owner__);
}

struct EntityObserveRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityObserveRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URI = 4
  };
  const flatbuffers::String *URI() const {
    return GetPointer<const flatbuffers::String *>(VT_URI);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URI) &&
           verifier.VerifyString(URI()) &&
           verifier.EndTable();
  }
};

struct EntityObserveRequestBuilder {
  typedef EntityObserveRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_URI(flatbuffers::Offset<flatbuffers::String> URI) {
    fbb_.AddOffset(EntityObserveRequest::VT_URI, URI);
  }
  explicit EntityObserveRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EntityObserveRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EntityObserveRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<EntityObserveRequest> CreateEntityObserveRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> URI = 0) {
  EntityObserveRequestBuilder builder_(_fbb);
  builder_.add_URI(URI);
  return builder_.Finish();
}

inline flatbuffers::Offset<EntityObserveRequest> CreateEntityObserveRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *URI = nullptr) {
  auto URI__ = URI ? _fbb.CreateString(URI) : 0;
  return showtime::CreateEntityObserveRequest(
      _fbb,
      URI__);
}

struct FactoryCreateEntityRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FactoryCreateEntityRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CREATABLE_ENTITY_URI = 4,
    VT_NAME = 6
  };
  const flatbuffers::String *creatable_entity_URI() const {
    return GetPointer<const flatbuffers::String *>(VT_CREATABLE_ENTITY_URI);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CREATABLE_ENTITY_URI) &&
           verifier.VerifyString(creatable_entity_URI()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct FactoryCreateEntityRequestBuilder {
  typedef FactoryCreateEntityRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_creatable_entity_URI(flatbuffers::Offset<flatbuffers::String> creatable_entity_URI) {
    fbb_.AddOffset(FactoryCreateEntityRequest::VT_CREATABLE_ENTITY_URI, creatable_entity_URI);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FactoryCreateEntityRequest::VT_NAME, name);
  }
  explicit FactoryCreateEntityRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FactoryCreateEntityRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FactoryCreateEntityRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<FactoryCreateEntityRequest> CreateFactoryCreateEntityRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> creatable_entity_URI = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  FactoryCreateEntityRequestBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_creatable_entity_URI(creatable_entity_URI);
  return builder_.Finish();
}

inline flatbuffers::Offset<FactoryCreateEntityRequest> CreateFactoryCreateEntityRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *creatable_entity_URI = nullptr,
    const char *name = nullptr) {
  auto creatable_entity_URI__ = creatable_entity_URI ? _fbb.CreateString(creatable_entity_URI) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return showtime::CreateFactoryCreateEntityRequest(
      _fbb,
      creatable_entity_URI__,
      name__);
}

struct FactoryCreateEntityACK FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FactoryCreateEntityACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CREATED_ENTITY_URI = 4
  };
  const flatbuffers::String *created_entity_URI() const {
    return GetPointer<const flatbuffers::String *>(VT_CREATED_ENTITY_URI);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CREATED_ENTITY_URI) &&
           verifier.VerifyString(created_entity_URI()) &&
           verifier.EndTable();
  }
};

struct FactoryCreateEntityACKBuilder {
  typedef FactoryCreateEntityACK Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_created_entity_URI(flatbuffers::Offset<flatbuffers::String> created_entity_URI) {
    fbb_.AddOffset(FactoryCreateEntityACK::VT_CREATED_ENTITY_URI, created_entity_URI);
  }
  explicit FactoryCreateEntityACKBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FactoryCreateEntityACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FactoryCreateEntityACK>(end);
    return o;
  }
};

inline flatbuffers::Offset<FactoryCreateEntityACK> CreateFactoryCreateEntityACK(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> created_entity_URI = 0) {
  FactoryCreateEntityACKBuilder builder_(_fbb);
  builder_.add_created_entity_URI(created_entity_URI);
  return builder_.Finish();
}

inline flatbuffers::Offset<FactoryCreateEntityACK> CreateFactoryCreateEntityACKDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *created_entity_URI = nullptr) {
  auto created_entity_URI__ = created_entity_URI ? _fbb.CreateString(created_entity_URI) : 0;
  return showtime::CreateFactoryCreateEntityACK(
      _fbb,
      created_entity_URI__);
}

struct CableCreateRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CableCreateRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CABLE = 4
  };
  const showtime::Cable *cable() const {
    return GetPointer<const showtime::Cable *>(VT_CABLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CABLE) &&
           verifier.VerifyTable(cable()) &&
           verifier.EndTable();
  }
};

struct CableCreateRequestBuilder {
  typedef CableCreateRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cable(flatbuffers::Offset<showtime::Cable> cable) {
    fbb_.AddOffset(CableCreateRequest::VT_CABLE, cable);
  }
  explicit CableCreateRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CableCreateRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CableCreateRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CableCreateRequest> CreateCableCreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<showtime::Cable> cable = 0) {
  CableCreateRequestBuilder builder_(_fbb);
  builder_.add_cable(cable);
  return builder_.Finish();
}

struct CableReadRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CableReadRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4
  };
  const showtime::Cable *address() const {
    return GetPointer<const showtime::Cable *>(VT_ADDRESS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyTable(address()) &&
           verifier.EndTable();
  }
};

struct CableReadRequestBuilder {
  typedef CableReadRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_address(flatbuffers::Offset<showtime::Cable> address) {
    fbb_.AddOffset(CableReadRequest::VT_ADDRESS, address);
  }
  explicit CableReadRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CableReadRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CableReadRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CableReadRequest> CreateCableReadRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<showtime::Cable> address = 0) {
  CableReadRequestBuilder builder_(_fbb);
  builder_.add_address(address);
  return builder_.Finish();
}

struct CableUpdateRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CableUpdateRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OLD_ADDRESS = 4,
    VT_NEW_ADDRESS = 6
  };
  const showtime::Cable *old_address() const {
    return GetPointer<const showtime::Cable *>(VT_OLD_ADDRESS);
  }
  const showtime::Cable *new_address() const {
    return GetPointer<const showtime::Cable *>(VT_NEW_ADDRESS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OLD_ADDRESS) &&
           verifier.VerifyTable(old_address()) &&
           VerifyOffset(verifier, VT_NEW_ADDRESS) &&
           verifier.VerifyTable(new_address()) &&
           verifier.EndTable();
  }
};

struct CableUpdateRequestBuilder {
  typedef CableUpdateRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_old_address(flatbuffers::Offset<showtime::Cable> old_address) {
    fbb_.AddOffset(CableUpdateRequest::VT_OLD_ADDRESS, old_address);
  }
  void add_new_address(flatbuffers::Offset<showtime::Cable> new_address) {
    fbb_.AddOffset(CableUpdateRequest::VT_NEW_ADDRESS, new_address);
  }
  explicit CableUpdateRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CableUpdateRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CableUpdateRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CableUpdateRequest> CreateCableUpdateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<showtime::Cable> old_address = 0,
    flatbuffers::Offset<showtime::Cable> new_address = 0) {
  CableUpdateRequestBuilder builder_(_fbb);
  builder_.add_new_address(new_address);
  builder_.add_old_address(old_address);
  return builder_.Finish();
}

struct CableDestroyRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CableDestroyRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CABLE = 4
  };
  const showtime::Cable *cable() const {
    return GetPointer<const showtime::Cable *>(VT_CABLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CABLE) &&
           verifier.VerifyTable(cable()) &&
           verifier.EndTable();
  }
};

struct CableDestroyRequestBuilder {
  typedef CableDestroyRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cable(flatbuffers::Offset<showtime::Cable> cable) {
    fbb_.AddOffset(CableDestroyRequest::VT_CABLE, cable);
  }
  explicit CableDestroyRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CableDestroyRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CableDestroyRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CableDestroyRequest> CreateCableDestroyRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<showtime::Cable> cable = 0) {
  CableDestroyRequestBuilder builder_(_fbb);
  builder_.add_cable(cable);
  return builder_.Finish();
}

struct StageMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StageMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT_TYPE = 4,
    VT_CONTENT = 6
  };
  showtime::Content content_type() const {
    return static_cast<showtime::Content>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const showtime::SignalMessage *content_as_SignalMessage() const {
    return content_type() == showtime::Content_SignalMessage ? static_cast<const showtime::SignalMessage *>(content()) : nullptr;
  }
  const showtime::ServerStatusMessage *content_as_ServerStatusMessage() const {
    return content_type() == showtime::Content_ServerStatusMessage ? static_cast<const showtime::ServerStatusMessage *>(content()) : nullptr;
  }
  const showtime::ClientJoinRequest *content_as_ClientJoinRequest() const {
    return content_type() == showtime::Content_ClientJoinRequest ? static_cast<const showtime::ClientJoinRequest *>(content()) : nullptr;
  }
  const showtime::ClientLeaveRequest *content_as_ClientLeaveRequest() const {
    return content_type() == showtime::Content_ClientLeaveRequest ? static_cast<const showtime::ClientLeaveRequest *>(content()) : nullptr;
  }
  const showtime::ClientGraphHandshakeStart *content_as_ClientGraphHandshakeStart() const {
    return content_type() == showtime::Content_ClientGraphHandshakeStart ? static_cast<const showtime::ClientGraphHandshakeStart *>(content()) : nullptr;
  }
  const showtime::ClientGraphHandshakeStop *content_as_ClientGraphHandshakeStop() const {
    return content_type() == showtime::Content_ClientGraphHandshakeStop ? static_cast<const showtime::ClientGraphHandshakeStop *>(content()) : nullptr;
  }
  const showtime::ClientGraphHandshakeListen *content_as_ClientGraphHandshakeListen() const {
    return content_type() == showtime::Content_ClientGraphHandshakeListen ? static_cast<const showtime::ClientGraphHandshakeListen *>(content()) : nullptr;
  }
  const showtime::EntityCreateRequest *content_as_EntityCreateRequest() const {
    return content_type() == showtime::Content_EntityCreateRequest ? static_cast<const showtime::EntityCreateRequest *>(content()) : nullptr;
  }
  const showtime::EntityReadRequest *content_as_EntityReadRequest() const {
    return content_type() == showtime::Content_EntityReadRequest ? static_cast<const showtime::EntityReadRequest *>(content()) : nullptr;
  }
  const showtime::EntityUpdateRequest *content_as_EntityUpdateRequest() const {
    return content_type() == showtime::Content_EntityUpdateRequest ? static_cast<const showtime::EntityUpdateRequest *>(content()) : nullptr;
  }
  const showtime::EntityDestroyRequest *content_as_EntityDestroyRequest() const {
    return content_type() == showtime::Content_EntityDestroyRequest ? static_cast<const showtime::EntityDestroyRequest *>(content()) : nullptr;
  }
  const showtime::EntityTakeOwnershipRequest *content_as_EntityTakeOwnershipRequest() const {
    return content_type() == showtime::Content_EntityTakeOwnershipRequest ? static_cast<const showtime::EntityTakeOwnershipRequest *>(content()) : nullptr;
  }
  const showtime::EntityObserveRequest *content_as_EntityObserveRequest() const {
    return content_type() == showtime::Content_EntityObserveRequest ? static_cast<const showtime::EntityObserveRequest *>(content()) : nullptr;
  }
  const showtime::FactoryCreateEntityRequest *content_as_FactoryCreateEntityRequest() const {
    return content_type() == showtime::Content_FactoryCreateEntityRequest ? static_cast<const showtime::FactoryCreateEntityRequest *>(content()) : nullptr;
  }
  const showtime::FactoryCreateEntityACK *content_as_FactoryCreateEntityACK() const {
    return content_type() == showtime::Content_FactoryCreateEntityACK ? static_cast<const showtime::FactoryCreateEntityACK *>(content()) : nullptr;
  }
  const showtime::CableCreateRequest *content_as_CableCreateRequest() const {
    return content_type() == showtime::Content_CableCreateRequest ? static_cast<const showtime::CableCreateRequest *>(content()) : nullptr;
  }
  const showtime::CableReadRequest *content_as_CableReadRequest() const {
    return content_type() == showtime::Content_CableReadRequest ? static_cast<const showtime::CableReadRequest *>(content()) : nullptr;
  }
  const showtime::CableUpdateRequest *content_as_CableUpdateRequest() const {
    return content_type() == showtime::Content_CableUpdateRequest ? static_cast<const showtime::CableUpdateRequest *>(content()) : nullptr;
  }
  const showtime::CableDestroyRequest *content_as_CableDestroyRequest() const {
    return content_type() == showtime::Content_CableDestroyRequest ? static_cast<const showtime::CableDestroyRequest *>(content()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const showtime::SignalMessage *StageMessage::content_as<showtime::SignalMessage>() const {
  return content_as_SignalMessage();
}

template<> inline const showtime::ServerStatusMessage *StageMessage::content_as<showtime::ServerStatusMessage>() const {
  return content_as_ServerStatusMessage();
}

template<> inline const showtime::ClientJoinRequest *StageMessage::content_as<showtime::ClientJoinRequest>() const {
  return content_as_ClientJoinRequest();
}

template<> inline const showtime::ClientLeaveRequest *StageMessage::content_as<showtime::ClientLeaveRequest>() const {
  return content_as_ClientLeaveRequest();
}

template<> inline const showtime::ClientGraphHandshakeStart *StageMessage::content_as<showtime::ClientGraphHandshakeStart>() const {
  return content_as_ClientGraphHandshakeStart();
}

template<> inline const showtime::ClientGraphHandshakeStop *StageMessage::content_as<showtime::ClientGraphHandshakeStop>() const {
  return content_as_ClientGraphHandshakeStop();
}

template<> inline const showtime::ClientGraphHandshakeListen *StageMessage::content_as<showtime::ClientGraphHandshakeListen>() const {
  return content_as_ClientGraphHandshakeListen();
}

template<> inline const showtime::EntityCreateRequest *StageMessage::content_as<showtime::EntityCreateRequest>() const {
  return content_as_EntityCreateRequest();
}

template<> inline const showtime::EntityReadRequest *StageMessage::content_as<showtime::EntityReadRequest>() const {
  return content_as_EntityReadRequest();
}

template<> inline const showtime::EntityUpdateRequest *StageMessage::content_as<showtime::EntityUpdateRequest>() const {
  return content_as_EntityUpdateRequest();
}

template<> inline const showtime::EntityDestroyRequest *StageMessage::content_as<showtime::EntityDestroyRequest>() const {
  return content_as_EntityDestroyRequest();
}

template<> inline const showtime::EntityTakeOwnershipRequest *StageMessage::content_as<showtime::EntityTakeOwnershipRequest>() const {
  return content_as_EntityTakeOwnershipRequest();
}

template<> inline const showtime::EntityObserveRequest *StageMessage::content_as<showtime::EntityObserveRequest>() const {
  return content_as_EntityObserveRequest();
}

template<> inline const showtime::FactoryCreateEntityRequest *StageMessage::content_as<showtime::FactoryCreateEntityRequest>() const {
  return content_as_FactoryCreateEntityRequest();
}

template<> inline const showtime::FactoryCreateEntityACK *StageMessage::content_as<showtime::FactoryCreateEntityACK>() const {
  return content_as_FactoryCreateEntityACK();
}

template<> inline const showtime::CableCreateRequest *StageMessage::content_as<showtime::CableCreateRequest>() const {
  return content_as_CableCreateRequest();
}

template<> inline const showtime::CableReadRequest *StageMessage::content_as<showtime::CableReadRequest>() const {
  return content_as_CableReadRequest();
}

template<> inline const showtime::CableUpdateRequest *StageMessage::content_as<showtime::CableUpdateRequest>() const {
  return content_as_CableUpdateRequest();
}

template<> inline const showtime::CableDestroyRequest *StageMessage::content_as<showtime::CableDestroyRequest>() const {
  return content_as_CableDestroyRequest();
}

struct StageMessageBuilder {
  typedef StageMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content_type(showtime::Content content_type) {
    fbb_.AddElement<uint8_t>(StageMessage::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(flatbuffers::Offset<void> content) {
    fbb_.AddOffset(StageMessage::VT_CONTENT, content);
  }
  explicit StageMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<StageMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StageMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<StageMessage> CreateStageMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    showtime::Content content_type = showtime::Content_NONE,
    flatbuffers::Offset<void> content = 0) {
  StageMessageBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyContent(flatbuffers::Verifier &verifier, const void *obj, Content type) {
  switch (type) {
    case Content_NONE: {
      return true;
    }
    case Content_SignalMessage: {
      auto ptr = reinterpret_cast<const showtime::SignalMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_ServerStatusMessage: {
      auto ptr = reinterpret_cast<const showtime::ServerStatusMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_ClientJoinRequest: {
      auto ptr = reinterpret_cast<const showtime::ClientJoinRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_ClientLeaveRequest: {
      auto ptr = reinterpret_cast<const showtime::ClientLeaveRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_ClientGraphHandshakeStart: {
      auto ptr = reinterpret_cast<const showtime::ClientGraphHandshakeStart *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_ClientGraphHandshakeStop: {
      auto ptr = reinterpret_cast<const showtime::ClientGraphHandshakeStop *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_ClientGraphHandshakeListen: {
      auto ptr = reinterpret_cast<const showtime::ClientGraphHandshakeListen *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_EntityCreateRequest: {
      auto ptr = reinterpret_cast<const showtime::EntityCreateRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_EntityReadRequest: {
      auto ptr = reinterpret_cast<const showtime::EntityReadRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_EntityUpdateRequest: {
      auto ptr = reinterpret_cast<const showtime::EntityUpdateRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_EntityDestroyRequest: {
      auto ptr = reinterpret_cast<const showtime::EntityDestroyRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_EntityTakeOwnershipRequest: {
      auto ptr = reinterpret_cast<const showtime::EntityTakeOwnershipRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_EntityObserveRequest: {
      auto ptr = reinterpret_cast<const showtime::EntityObserveRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_FactoryCreateEntityRequest: {
      auto ptr = reinterpret_cast<const showtime::FactoryCreateEntityRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_FactoryCreateEntityACK: {
      auto ptr = reinterpret_cast<const showtime::FactoryCreateEntityACK *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_CableCreateRequest: {
      auto ptr = reinterpret_cast<const showtime::CableCreateRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_CableReadRequest: {
      auto ptr = reinterpret_cast<const showtime::CableReadRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_CableUpdateRequest: {
      auto ptr = reinterpret_cast<const showtime::CableUpdateRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Content_CableDestroyRequest: {
      auto ptr = reinterpret_cast<const showtime::CableDestroyRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyContentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyContent(
        verifier,  values->Get(i), types->GetEnum<Content>(i))) {
      return false;
    }
  }
  return true;
}

inline const showtime::StageMessage *GetStageMessage(const void *buf) {
  return flatbuffers::GetRoot<showtime::StageMessage>(buf);
}

inline const showtime::StageMessage *GetSizePrefixedStageMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<showtime::StageMessage>(buf);
}

inline bool VerifyStageMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<showtime::StageMessage>(nullptr);
}

inline bool VerifySizePrefixedStageMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<showtime::StageMessage>(nullptr);
}

inline void FinishStageMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<showtime::StageMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStageMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<showtime::StageMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace showtime

#endif  // FLATBUFFERS_GENERATED_STAGEMESSAGE_SHOWTIME_H_
